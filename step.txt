step1: 打字機和花朵綻放特效/ solog
step2: 選取照片下方預覽，拖拉至上方空格
2-1 : 選取幾張便生成幾個格子，上限4張
2-2 : drag aon drog 
2-3 : 儲存狀態
step3: 排完順序可預覽圖片
3-1: 文字編輯器
3-2: 



額外功能：音樂播放器


<div>
        <p>`count ${next}`</p>
        <button
          onclick={() => {
            setNext(next + 1);
          }}
        ></button>
        <p>{prev}</p>
        <button
          onclick={() => {
            setPrev(prev - 1);
          }}
        ></button>
      </div>


      const [next, setNext] = useState(0);
  const [prev, setPrev] = useState(0);
  const[count,setCount] = 



  <div className="step">
          <p>{`第${step}`}</p>
          {step === 1 ? <StepOne /> : step === 2 ? <StepTwo /> : <StepThree />}
          <button onClick={() => setStep(step + 1)}>下一頁</button>
          {/* <div className="stepTwo step">
          <StepTwo />
        </div>
        <div className="stepThree step">
          <StepThree />
        </div> */}
        </div>







        import React, { useState, useCallback, useContext } from "react";
import update from "immutability-helper";
import styled from "styled-components";
import { TiDeleteOutline } from "react-icons/ti";
import { AiOutlineCloudUpload } from "react-icons/ai";
import { storage } from "../../../../components/firebase";
import {
  getDownloadURL,
  ref,
  uploadBytes,
  listAll,
  list,
  uploadBytesResumable,
} from "firebase/storage";
import { v4 } from "uuid";
// useRef,useEffect
import PreviewImage from "./PreviewImage";
import { StepContext } from "../StepByStep";

const PreviewBoxes = styled.section`
  width: 100%;
  height: 100%;
  padding: 1.5rem 0;
`;

const PreviewLabel = styled.label`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 150px;
  height: 100px;
  margin: 20px auto;
  padding: 5px;
  border-radius: 25%;
  outline: 3px dashed gray;
  background: rgba(255, 255, 255, 0.1);
  // box-shadow: rgb(104, 142, 129) 2px 2px 2px 4px;
  color: gray;
  cursor: pointer;
  font-size: 20px;

  &:hover {
    // outline: 3px solid rgb(104, 142, 129);
    opacity: 0.7;
    background: gray;
    color: white;
  }
  svg {
    font-size: 28px;
    color: gray;
    &:hover {
      opacity: 0.7;
      color: white;
    }
  }

  span {
    font-weight: 700;
    font-size: 16px;
    padding-top: 0.5rem;
  }

  input {
    display: none;
  }
`;

const PreviewAlbum = styled.ul`
  width: 100%;
  height: 80%;
  display: flex;
  flex-direction: row;
  // flex-wrap: wrap;
  justify-content: start;
  align-items: center;
  overflow: scroll;
`;

const PreviewImages = styled.li`
  margin: 16px 16px;
  margin-bottom: 60px;
  box-shadow: 0px 1px 2px 0px;
  position: relative;
  outline: 2px solid rgb(104, 142, 129);
  // background: rgb(104, 142, 129);
  padding: 10px 10px;

  img {
    width: 200px;
    height: 200px;
    object-fit: cover;
  }

  button {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    position: absolute;
    background-color: transparent;
    top: -16px;
    right: -16px;
    cursor: pointer;
    color: gray;
    font-size: 20px;

    &:hover {
      opacity: 0.7;
    }
  }
`;

const PreviewImagesLen = styled.p`
  display: flex;
  margin: 5px auto;
  text-align: center;
  justify-content: center;
  span {
    color: red;
  }
`;

const PreviewContainer = (props) => {
  const { selectedImages, setSelectedImages } = useContext(StepContext);

  // //取得相簿名稱,日期,描述
  // const name = useContext(AlbumName);
  // const date = useContext(AlbumDate);
  // const description = useContext(AlbumDescription);
  // const test = useContext(Test);
  // console.log(test);
  // console.log(name, date, description);

  //拖曳上傳

  // 點選照片
  // const [selectedImages, setSelectedImages] = useState([]);

  // 上傳照片
  const [files, setFiles] = useState([]);

  const [cards, setCards] = useState([]);

  // const [imageUrls, setImageUrls] = useState([]);
  // const imagesListRef = ref(storage, "images/");

  // 選取照片執行的 func
  const onSelectFile = (event) => {
    // filelist 取得一張照片
    const selectFiles = event.target.files; // files[0] -> Blob
    // 取得多張照片後轉 filelist array
    const selectFilesArray = Array.from(selectFiles); // Blob[]
    // 將filelist array 裡的每張照片展開 並回傳 url
    const imagesArray = selectFilesArray.map((file) => {
      return URL.createObjectURL(file);
    }); // string[] object

    const cardsArray = imagesArray.map((card, index) => {
      return {
        id: index,
        text: card,
      };
    });

    console.log(cardsArray);

    //最新狀態會是在當前圖片後上 網址
    setSelectedImages((previousImages) => previousImages.concat(imagesArray)); // selectedImages => string[]

    // 因為上傳的照片需要blob，所以上傳照片的最新狀態就是當前圖片後加上 選取照片後的 blob[]
    setFiles((previousImages) => previousImages.concat(selectFilesArray)); /// files => Blob[]

    setCards((previousImages) => previousImages.concat(cardsArray));

  };

  const moveCard = useCallback((dragIndex, hoverIndex) => {
    setCards((prevCards) =>
      update(prevCards, {
        $splice: [
          [dragIndex, 1],
          [hoverIndex, 0, prevCards[dragIndex]],
        ],
      })
    );
  }, []);

  const renderCard = useCallback((card, index) => {
    return (
      <PreviewImage
        key={card.id}
        index={index}
        id={card.id}
        text={card.text}
        moveCard={moveCard}
      />
    );
  }, []);

  // 上傳照片執行的 func
  const uploadImg = () => {
    if (files == null) return;
    for (let i = 0; i < files.length; i++) {
      const imageRef = ref(storage, `images/${files[i].name + v4()}`);
      uploadBytes(imageRef, files[i]).then((snapshot) => {
        // getDownloadURL(snapshot.ref).then((url) => {
        //   setImageUrls((prev) => [...prev, url]);
        // });
        alert("image upload");
      });
    }
  };

  // useEffect(() => {
  //   listAll(imagesListRef).then((response) => {
  //     response.items.forEach((item) => {
  //       getDownloadURL(item).then((url) => {
  //         setImageUrls((prev) => [...prev, url]);
  //       });
  //     });
  //   });
  // }, []);

  // // console.log(onSelectFile);

  return (
    // <AlbumName.Consumer>
    //   <AlbumDate.Consumer>
    //     <AlbumDescription.Consumer>
    //       <Test.Consumer>

    //       </Test.Consumer>
    //     </AlbumDescription.Consumer>
    //   </AlbumDate.Consumer>
    // </AlbumName.Consumer>
    <PreviewBoxes>
      {/* <p>{name}</p>
     <p>{date}</p>
     <p>{description}</p>
     <p>{test}</p> */}
      {/* <div>{cards.map((card, i) => renderCard(card, i))}</div> */}
      <PreviewLabel>
        <AiOutlineCloudUpload />
        add images
        <input
          type="file"
          name="images"
          onChange={onSelectFile}
          multiple
          accept="image/png, image/jpeg, image/jpg, image/svg"
        />
      </PreviewLabel>
      <br />
      {selectedImages.length > 0 &&
        (selectedImages.length > 10 ? (
          <PreviewImagesLen>
            limit 10 images.
            <br />
            <span>Please delete {selectedImages.length - 10} of them.</span>
          </PreviewImagesLen>
        ) : (
          <button onClick={uploadImg}>
            UPLOAD {selectedImages.length} IMAGE
            {selectedImages.length === 1 ? "" : "S"}
          </button>
        ))}
      {/* {imageUrls.map((url) => {
 return <img src={url} />;
})} */}

      <PreviewAlbum>
        {selectedImages &&
          selectedImages.map((image, index) => {
            return (
              <PreviewImages key={image}>
                {renderCard(cards[index], index)}
                {/* <img src={image} alt="upload images" /> */}
                <button
                  onClick={() =>
                    setSelectedImages(selectedImages.filter((e) => e !== image))
                  }
                >
                  <TiDeleteOutline />
                </button>
                <p>{index + 1}</p>
              </PreviewImages>
            );
          })}
      </PreviewAlbum>
    </PreviewBoxes>
  );
};

export default PreviewContainer;

{
  /* <div className="App">
  <input
    type="file"
    onChange={(event) => {
      setImageUpload(event.target.files[0]);
    }}
  />
  <button onClick={uploadFile}> Upload Image</button>
  {imageUrls.map((url) => {
    return <img src={url} />;
  })}
  </div> */
}



------ stepmenu.jsx

import React from "react";
import { useState, useEffect, useRef, useContext } from "react";
import { useNavigate } from "react-router-dom";
import styled from "styled-components";
import { db } from "../../../components/firebase";
import Albums from "./Albums";
import {
  query,
  collection,
  onSnapshot,
  addDoc,
  setDoc,
  doc,
  deleteDoc,
} from "firebase/firestore";
import Button from "../../../components/Button";

import { AuthContext } from "../../AuthPage/UserAuthProvider";
import { StepContext } from "../StepByStep/StepByStep";

// export const AlbumName = React.createContext();
// export const AlbumDate = React.createContext();
// export const AlbumDescription = React.createContext();

// export const Test = React.createContext();

// 文字打字機功能
// const MagicOcean = ["step1:", "step2:"];
// let index = 0;
// .attrs({ className: stepMenuBoxes })

const StepMenuBoxes = styled.div`
  max-width: 75%;
  height: 85%;
  display: flex;
  flex-direction: column;
  margin: auto;
  justify-content: center;
  align-items: center;
`;

const StepMenuTitle = styled.div`
  margin: 50px auto;
  color: gray;
  h2 {
    font-size: 2.2rem;
    color: transparent;
    -webkit-text-stroke: 1.5px gray;
    letter-spacing: 2px;
  }
`;

const StepMenuInput = styled.div``;

const StepMenuForm = styled.form`
  margin: auto;

  label {
    display: flex;
    justify-content: start;
    align-items: center;
    margin: 25px auto;
    color: gray;
    font-size: 18px;
    input {
      display: flex;
      justify-content: end;
      align-items: center;
      margin-left: 10px;
      padding: 0 10px;
      border-radius: 10px;
      background: rgba(255, 255, 255, 0.1);
      outline: 1.5px solid gray;
      font-size: 18px;
    }
  }
`;

const StepMenuButton = styled(Button)`
  margin: 60px auto;
  font-size: 20px;
  background: rgba(255, 255, 255, 0.1);
  outline: 2.5px solid gray;
  color: gray;

  &:hover {
    background: gray;
  }
`;

const StepMenuUl = styled.div``;

function StepMenu(props) {
  // const [editor, setEditor] = useState("");
  // const [name, setName] = useState("");
  // const [date, setDate] = useState("");
  // const [description, setDescription] = useState("");

  const [show, setShow] = useState(true);

  const { currentUser } = useContext(AuthContext);
  console.log(currentUser);

  const {
    editor,
    setEditor,
    name,
    setName,
    date,
    setDate,
    description,
    setDescription,
  } = useContext(StepContext);

  // 建立相簿
  const [albums, setAlbums] = useState([]);

  const handleEditor = (event) => {
    setEditor(event.target.value);
  };

  const handleName = (event) => {
    setName(event.target.value);
  };

  const handleDate = (event) => {
    setDate(event.target.value);
  };

  const handleDescription = (event) => {
    setDescription(event.target.value);
  };

  // 將資料存到firestorge
  const submit = async (e) => {
    e.preventDefault(e);
    if (editor === "" || name === "" || date === "" || description === "") {
      return;
    }
    try {
      const newDocRef = doc(collection(db, currentUser.email));

      await setDoc(newDocRef, {
        Editor: editor,
        Name: name,
        Date: date,
        Description: description,
      });

      // const docRef = await addDoc(
      //   collection(db, currentUser.email),
      //   {
      //     Editor: editor,
      //     Name: name,
      //     Date: date,
      //     Description: description,
      //   }
      // { merge: false }
      // );
      console.log("Document written with ID: ", newDocRef.id);
      // console.log("Document written with ID: ", docRef.id);
      setEditor("");
      setName("");
      setDate("");
      setDescription("");
      setShow(false);
    } catch (error) {
      console.error("Error adding document: ", error);
    }
  };

  // await addDoc(collection(db, "albums"), {
  //   Editor: editor,
  //   Name: name,
  //   Date: date,
  //   Description: description,
  // });

  // console.log(name, date, description);

  useEffect(() => {
    const q = query(collection(db, "albums"));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      let albumsArr = [];
      querySnapshot.forEach((doc) => {
        albumsArr.push({ ...doc.data(), id: doc.id });
      });
      setAlbums(albumsArr);
    });
    return () => unsubscribe();
  }, []);

  // const navigate = useNavigate();
  // 從資料庫將資料刪除
  const deleteAlbum = async (id) => {
    await deleteDoc(doc(db, "albums", id));
    setShow(true);
    // props.prev();
    // navigate("/home/edit");
  };

  // useEffect(() => {
  //   setTimeout(() => {
  //     navigate("/home/edit");
  //   }, 3000);
  // }, [navigate]);

  console.log(albums);

  return (
    <>
      {/* <StepMenuBoxes> */}
      <StepMenuTitle>
        {show ? <h2>Let's try to make special album by yourself !</h2> : null}
      </StepMenuTitle>
      <StepMenuInput>
        {show ? (
          <StepMenuForm onSubmit={submit}>
            <label htmlFor="">
              Editor :
              <input
                type="text"
                value={editor}
                onChange={handleEditor}
                required
              />
            </label>{" "}
            <label htmlFor="">
              Album Name :
              <input type="text" value={name} onChange={handleName} required />
            </label>{" "}
            <label htmlFor="">
              Date :
              <input type="date" value={date} onChange={handleDate} />
            </label>{" "}
            <label htmlFor="">
              {" "}
              Description :
              <input
                type="text"
                value={description}
                onChange={handleDescription}
                required
              />
            </label>
            <StepMenuButton>Submit</StepMenuButton>
          </StepMenuForm>
        ) : null}
      </StepMenuInput>
      <StepMenuUl>
        {albums.map((album, index) => (
          <Albums key={index} album={album} deleteAlbum={deleteAlbum} />
        ))}
      </StepMenuUl>
      {/* </StepMenuBoxes> */}
    </>
  );
}

export default StepMenu;



     <TestComponent>
                {albums.map((album) => {
                  const photoCount = album.UrlArray.length;
                  const photoArrays =[];
                  let i = 0;
                  if (photoCount === 1) {
                    return (
                      <TestList key={album.id}>
                        <TestItem>
                          <ImageCenter>
                            <img
                              key={album.UrlArray[0]}
                              src={album.UrlArray[0]}
                            />
                          </ImageCenter>
                        </TestItem>
                      </TestList>
                    );
                  } else if (photoCount === 2) {
                    return (
                      <TestList key={album.id}>
                        {album.UrlArray.map((url, index) => (
                          <TestItem key={url}>
                            {index === 0 ? (
                              <ImageLeft>
                                <img
                                  key={album.UrlArray[0]}
                                  src={album.UrlArray[0]}
                                />
                              </ImageLeft>
                            ) : (
                              <ImageRight>
                                <img
                                  key={album.UrlArray[1]}
                                  src={album.UrlArray[1]}
                                />
                              </ImageRight>
                            )}
                          </TestItem>
                        ))}
                      </TestList>
                    );
                  } else {
                    // const shuffledUrls = album.UrlArray.sort(
                    //   () => Math.random() - 0.5 );

                    const shuffledUrls = shuffleArray(album.UrlArray);
                    const firstList = shuffledUrls.slice(0, 2);
                    const secondList = shuffledUrls.slice(2);
                    return (
                      <>
                        <TestList key={`${album.id}-1`}>
                          {firstList.map((url) => (
                            <TestItem key={url}>
                              <img src={url} style={{ width: "100%" }} />
                            </TestItem>
                          ))}
                        </TestList>
                        <TestList key={`${album.id}-2`}>
                          {secondList.map((url) => (
                            <TestItem key={url}>
                              <img src={url} style={{ width: "100%" }} />
                            </TestItem>
                          ))}
                        </TestList>
                      </>
                      // <TestList key={album.id}>
                      //   {shuffledUrls.map((url) => (
                      //     <TestItem key={url}>
                      //       <ImageCenter>
                      //         <img
                      //           src={url}
                      //           style={{ width: "500px", height: "500px" }}
                      //         />
                      //       </ImageCenter>
                      //     </TestItem>
                      //   ))}
                      // </TestList>
                    );
                  }
                })}
              </TestComponent>


              import React, { useRef, useEffect, useState, useContext } from "react";
import styled from "styled-components";
import { AuthContext } from "../../AuthPage/UserAuthProvider";
import { StepContext } from "../StepByStep/StepByStep";
import { useNavigate } from "react-router-dom";
import { db } from "../../../components/firebase";
import {
  query,
  collection,
  onSnapshot,
  addDoc,
  setDoc,
  doc,
  deleteDoc,
} from "firebase/firestore";
import { storage } from "../../../components/firebase";
import {
  getDownloadURL,
  ref,
  uploadBytes,
  listAll,
  list,
  uploadBytesResumable,
} from "firebase/storage";
import { v4 } from "uuid";
import Button from "../../../components/Button";

import { EditorState, convertToRaw } from "draft-js";
import { Editor } from "react-draft-wysiwyg";
import draftToHtml from "draftjs-to-html";
import htmlToDraft from "html-to-draftjs";

import { Navigation, Pagination, Scrollbar, A11y, EffectFade } from "swiper";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";
import "swiper/css/scrollbar";

import animationBgimg from "../../../assets/toy.jpg";
import layoutLined from "../../../assets/iconmonstr-layout-lined.svg";

import paintBrush from "../../../assets/iconmonstr-paintbrush-7.svg";

import colorFan from "../../../assets/iconmonstr-color-fan-2.svg";

import MoveInWidthwise from "../../HomePage/MoveInWidthwise";
import AlbumTemplateForOne, {
  ImageCenter,
} from "../../MemberPage/AlbumTemplateForOne ";
import AlbumTemplateForTwo, {
  ImageLeftUp,
  ImageRightDown,
} from "../../MemberPage/AlbumTemplateForTwo";
import AlbumTemplateForThree, {
  ImageLeftDown,
  ImageRightUp,
} from "../../MemberPage/AlbumTemplateForThree";

import AlbumTemplateForFour, {
  ImageFull,
} from "../../MemberPage/AlbumTemplateForFour";

import CustomCursor from "../../../components/CustomCursor";

const EditorBgContainer = styled.div`
  width: 100%;
  height: 90%;
  position: relative;
`;

const EditorBgTitle = styled.div`
  display: flex;
  justify-content: center;
  margin: 40px auto;
  padding: 0 50px;
  line-height: 70px;
  text-align: center;
  color: gray;
  h2 {
    font-size: 50px;
    -webkit-text-stroke: 1.5px gray;
    letter-spacing: 2px;
  }
`;

const EditorBgIconList = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  img {
    width: 50px;
    height: 50px;
    background-color: transparent;
    border-radius: 50%;
    margin: 0 20px;
    color: gray;
  }
`;

const EditorBgBoxes = styled.div`
  width: 100%;
  height: 85%;
  display: flex;
`;

const EditorImg = styled.img`
  display: flex;
  justify-content: center;
  align-items: center;
  width: 300px;
  height: 300px;
  margin-top: 20px;
  height: 380px;
  object-fit: cover;
`;

const EditorAlbum = styled.div`
  width: 100%;
`;

const EditBgFrameBorderButton = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
`;

const EditBgFrameButton = styled(Button)`
  display: flex;
  margin: 60px 20px;
  font-size: 20px;
  background: rgba(255, 255, 255, 0.1);
  outline: 2.5px solid gray;
  color: gray;

  &:hover {
    background: gray;
  }
`;

const ParallaxGallery = styled.div`
  /* transform: translateX(
    ${(props) => (props.index - 1) * props.scrollPosition * 0.2}px
  ); */
`;

const ParallaxBox = styled.div`
  display: flex;
`;

// const Parallax1 = styled.img`
//   width: 800px;
//   height: 800px;
// `;

// const Parallax2 = styled.img`
//   width: 800px;
//   height: 800px;
// `;
// const Parallax3 = styled.img`
//   width: 800px;
//   height: 800px;
// `;

const Container = styled.div`
  width: 100vh;
  height: 100vw;
  transform: rotate(-90deg) translateX(-100vh);
  transform-origin: top left;
  position: absolute;
  overflow-x: hidden;
  overflow-y: scroll;
`;

// const Wrapper = styled.div`
//   display: flex;
//   width: 200vw;
//   transform: rotate(90deg) translateY(-100vh);
//   transform-origin: top left;
//   background: lightblue;
// `;

// const Slide = styled.div`
//   /* height: 100vh;
//   width: 100vw; */

//   :nth-child(1) {
//     /* height: 100vh;
//     width: 100vw; */
//     div {
//       height: 100vh;
//       width: 50vw;
//       background: white;
//       h1 {
//         margin: auto;
//         text-align: center;
//       }
//       h3 {
//         text-align: center;
//       }
//     }
//     div {
//       height: 50vw;
//       width: 100vh;
//       background: rgb(221, 214, 201);
//     }
//   }

//   :nth-child(2) {
//     background: lightyellow;
//     img {
//       width: 400px;
//       height: 400px;
//     }
//   }

//   :nth-child(3) {
//     background: lightblue;
//     img {
//       width: 300px;
//       height: 300px;
//     }
//   }

//   :nth-child(4) {
//     background: lightyellow;
//     img {
//       width: 400px;
//       height: 400px;
//     }
//   }
// `;

const Heading = styled.div`
  margin: auto;
  /* margin-bottom: 50px; */
  text-align: center;
  height: 100vh;
  width: 100vw;

  /* height: calc(100vh - 120px); */
  background-color: #d7d1b6;
  div {
    max-width: 1200px;
    font-size: 80px;
    margin: auto;
  }

  /* p {
    font-size: 16px;
  } */
`;

const AlbumContainer = styled.div`
  /* margin-top: 100px; */
`;

const PageContainer = styled.div`
  /* height: 100vh; */
`;

const TestComponent = styled.div`
  display: flex;
  /* width: ${(props) => props.itemCount * 100}vw; */
  width: 1000vw;
  background: rgb(215, 214, 212);
`;

const TestItem = styled.div`
  position: relative;
  display: flex;
  justify-content: center;
  width: 100vw;
  height: 100vh;
  flex: 0 0 10%;
  /* background: rgb(221, 214, 201); */
`;

const EditBgFrame = () => {
  const navigate = useNavigate();
  const { currentUser } = useContext(AuthContext);

  const {
    prev,
    next,
    editor,
    setEditor,
    name,
    setName,
    date,
    setDate,
    description,
    setDescription,
    selectedImages,
    setSelectedImages,
    files,
    setFiles,
    cards,
    setCards,
    imageUrls,
    setImageUrls,
    message,
    setMessage,
    rawMessage,
    setRawMessage,
  } = useContext(StepContext);

  // const containerRef = useRef(null);
  // const [scrollPosition, setScrollPosition] = useState(0);
  // const [offsetY, setOffsetY] = useState(0);
  // const handleScroll = () => setOffsetY(window.pageXOffset);

  // useEffect(() => {
  //   window.addEventListener("scroll", handleScroll);
  //   return () => window.removeEventListener("scroll", handleScroll);
  // }, []);

  // useEffect(() => {
  //   const handleScroll = () => {
  //     const { scrollTop } = containerRef.current;
  //     setScrollPosition(scrollTop);
  //   };
  //   containerRef.current.addEventListener("scroll", handleScroll);

  //   return () =>
  //     containerRef.current.removeEventListener("scroll", handleScroll);
  // }, []);

  // const [editorState, setEditorState] = useState(EditorState.createEmpty());

  // const onEditorStateChange = (newEditorState) => {
  //   setEditorState(newEditorState);
  //   setRawMessage(
  //     draftToHtml(convertToRaw(newEditorState.getCurrentContent()))
  //   );
  // };

  const handleEditorStateToMessage = () => {
    setMessage(rawMessage);
  };

  const wrapperStyle = {
    border: "1px solid #969696",
  };

  const editorStyle = {
    height: "10rem",
    padding: "1rem",
  };

  const finish = async (e) => {
    try {
      const urlArray = [];
      for (let i = 0; i < cards.length; i++) {
        const imageRef = ref(storage, `images/${cards[i].file.name + v4()}`);
        const snapshot = await uploadBytes(imageRef, cards[i].file);
        const url = await getDownloadURL(snapshot.ref);
        urlArray.push(url);
      }
      alert("image upload");
      const timestamp = Date.now();
      const randomString = Math.random().toString(36).substring(2);
      const uniqueId = `${timestamp}_${randomString}`;
      const newDocRef = doc(collection(db, "albums"), uniqueId);
      await setDoc(newDocRef, {
        Editor: editor,
        Name: name,
        Date: date,
        Description: description,
        Message: message,
        UrlArray: urlArray,
        createdAt: new Date(),
      });

      const newDocRef2 = doc(
        db,
        "users",
        currentUser.email,
        "album",
        newDocRef.id
      );
      await setDoc(newDocRef2, {
        Editor: editor,
        Name: name,
        Date: date,
        Description: description,
        Message: message,
        UrlArray: urlArray,
        createdAt: new Date(),
      });
      navigate("/home/library");

      console.log("Document written with ID: ", newDocRef.id);
    } catch (error) {
      console.error("Error adding document: ", error);
    }
  };

  const handleMessage = (event) => {
    setMessage(event.target.value);
  };

  // const handleScroll = () => {
  //   setScrollPosition(window.scrollY);
  // };

  // useEffect(() => {
  //   window.addEventListener("scroll", handleScroll);
  //   return () => {
  //     window.removeEventListener("scroll", handleScroll);
  //   };
  // }, []);

  return (
    <>
      <EditorBgContainer>
        <EditorBgTitle>
          <h2>Palette and Layout</h2>
          <EditorBgIconList>
            <img src={layoutLined} />
            <img src={paintBrush}></img>
            {/* <img src={colorFan}></img> */}
          </EditorBgIconList>
        </EditorBgTitle>
        <EditorBgBoxes>
          <EditorAlbum>
            {/* <Swiper
              effect="fade"
              modules={[Navigation, Pagination, Scrollbar, A11y]}
              spaceBetween={0}
              slidesPerView={10}
              navigation
              //  pagination={{ clickable: true}}
              scrollbar={{ draggable: true }}
              //  onSwiper={(swiper) => console.log(swiper)}
              onSlideChange={() => console.log("slide change")}
            >
              {cards.map((image, index) => {
                return (
                  <SwiperSlide key={index}>
                    <EditorImg src={image.text} alt="" />
                  </SwiperSlide>
                );
              })}
            </Swiper> */}
            {/* <ParallaxBox>
              <Parallax1
                src={animationBgimg}
                alt="animationBgimg"
                style={{ transform: `translateX(${offsetY * 0.2}px)` }}
              />
              <Parallax2
                src={animationBgimg}
                alt="animationBgimg"
                style={{ transform: `translateX(${offsetY * 0.3}px)` }}
              />
              <Parallax3
                src={animationBgimg}
                alt="animationBgimg"
                style={{ transform: `translateX(${offsetY * 0.4}px)` }}
              />
            </ParallaxBox> */}
            <AlbumContainer>
              <CustomCursor />
              <PageContainer>
                <Heading>
                  <div>Define Your Life</div>
                  <div>12345</div>
                </Heading>
              </PageContainer>
              <MoveInWidthwise
                displayed={
                  // ref={testComponentRef}
                  <TestComponent>
                    {cards.map((album, index) => {
                      const photoCount = album.UrlArray.length;

                      let currentGroup = [];
                      const photoGroups = [];

                      // 將照片分組，每組最多兩張照片
                      album.UrlArray.forEach((url, index) => {
                        currentGroup.push(url);
                        if (
                          currentGroup.length === 1 &&
                          photoGroups.length % 4 === 0
                        ) {
                          photoGroups.push(currentGroup);
                          currentGroup = [];
                        } else if (
                          currentGroup.length === 2 &&
                          photoGroups.length % 4 === 1
                        ) {
                          photoGroups.push(currentGroup);
                          currentGroup = [];
                        } else if (
                          currentGroup.length === 1 &&
                          photoGroups.length % 4 === 2
                        ) {
                          photoGroups.push(currentGroup);
                          currentGroup = [];
                        } else if (
                          currentGroup.length === 2 &&
                          photoGroups.length % 4 === 3
                        ) {
                          photoGroups.push(currentGroup);
                          currentGroup = [];
                        }
                        // (currentGroup.length === 2 || index === photoCount - 1) {
                        //   photoGroups.push(currentGroup);
                        //   currentGroup = [];
                        // }
                      });

                      // 渲染每個照片組
                      let currentIndex = 0;
                      return photoGroups.map((group) => {
                        let layout;
                        if (currentIndex % 4 === 0) {
                          layout = (
                            <TestItem key={`${album.id}-${currentIndex}`}>
                              <ImageCenter>
                                <img src={group[0]} key={group[0]} />
                              </ImageCenter>
                            </TestItem>
                          );
                          currentIndex += 1;
                        } else if (currentIndex % 4 === 1) {
                          layout = (
                            <TestItem key={`${album.id}-${currentIndex}`}>
                              <ImageLeftUp>
                                <img src={group[0]} key={group[0]} />
                              </ImageLeftUp>
                              {group.length > 1 && (
                                <ImageRightDown>
                                  <img src={group[1]} key={group[1]} />
                                </ImageRightDown>
                              )}
                              {group.length === 1 && <ImageCenter />}
                            </TestItem>
                          );
                          currentIndex += 1;
                        } else if (currentIndex % 4 === 2) {
                          layout = (
                            <TestItem key={`${album.id}-${currentIndex}`}>
                              <ImageFull>
                                <img src={group[0]} key={group[0]} />
                              </ImageFull>
                            </TestItem>
                          );
                          currentIndex += 1;
                        } else if (currentIndex % 4 === 3) {
                          layout = (
                            <TestItem key={`${album.id}-${currentIndex}`}>
                              <ImageLeftDown>
                                <img src={group[0]} key={group[0]} />
                              </ImageLeftDown>
                              {group.length > 1 && (
                                <ImageRightUp>
                                  <img src={group[1]} key={group[1]} />
                                </ImageRightUp>
                              )}
                              {group.length === 1 && <ImageCenter />}
                            </TestItem>
                          );
                          currentIndex += 1;
                        }
                        return layout;
                      });
                    })}
                  </TestComponent>
                }
              />
              <PageContainer>
                <Heading>
                  <h1>Story</h1>
                </Heading>
              </PageContainer>
            </AlbumContainer>
            {/* {cards.map((image, index) => {
              return (
                <div key={index}>
                  <EditorImg src={image.text} alt="" />
                </div>
              );
            })} */}
            {/* <Container>
              <Wrapper>
                <Slide>
                  <div>
                    <h1>Hello World</h1>
                    <h3>Hello Cat</h3>
                  </div>
                </Slide>
                <Slide>
                  <div>456</div>
                </Slide>
                <Slide></Slide>
              </Wrapper>
            </Container> */}
          </EditorAlbum>

          <React.Fragment>
            <div
              style={{
                // border: "1px solid #969696",
                borderRadius: "3px",
                width: "50%",
                height: "80%",
                padding: "1rem",
              }}
            >
              <div dangerouslySetInnerHTML={{ __html: message }}></div>
            </div>
          </React.Fragment>
        </EditorBgBoxes>
      </EditorBgContainer>
      {/* <Container>
        <Wrapper>
          <Slide></Slide>
        </Wrapper>
      </Container> */}
      <EditBgFrameBorderButton>
        <EditBgFrameButton onClick={() => prev()}>Prev</EditBgFrameButton>
        <EditBgFrameButton onClick={() => finish()}>Finish</EditBgFrameButton>
      </EditBgFrameBorderButton>
    </>
  );
};

export default EditBgFrame;
