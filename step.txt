step1: 打字機和花朵綻放特效/ solog
step2: 選取照片下方預覽，拖拉至上方空格
2-1 : 選取幾張便生成幾個格子，上限4張
2-2 : drag aon drog 
2-3 : 儲存狀態
step3: 排完順序可預覽圖片
3-1: 文字編輯器
3-2: 



額外功能：音樂播放器


<div>
        <p>`count ${next}`</p>
        <button
          onclick={() => {
            setNext(next + 1);
          }}
        ></button>
        <p>{prev}</p>
        <button
          onclick={() => {
            setPrev(prev - 1);
          }}
        ></button>
      </div>


      const [next, setNext] = useState(0);
  const [prev, setPrev] = useState(0);
  const[count,setCount] = 



  <div className="step">
          <p>{`第${step}`}</p>
          {step === 1 ? <StepOne /> : step === 2 ? <StepTwo /> : <StepThree />}
          <button onClick={() => setStep(step + 1)}>下一頁</button>
          {/* <div className="stepTwo step">
          <StepTwo />
        </div>
        <div className="stepThree step">
          <StepThree />
        </div> */}
        </div>







        import React, { useState, useCallback, useContext } from "react";
import update from "immutability-helper";
import styled from "styled-components";
import { TiDeleteOutline } from "react-icons/ti";
import { AiOutlineCloudUpload } from "react-icons/ai";
import { storage } from "../../../../components/firebase";
import {
  getDownloadURL,
  ref,
  uploadBytes,
  listAll,
  list,
  uploadBytesResumable,
} from "firebase/storage";
import { v4 } from "uuid";
// useRef,useEffect
import PreviewImage from "./PreviewImage";
import { StepContext } from "../StepByStep";

const PreviewBoxes = styled.section`
  width: 100%;
  height: 100%;
  padding: 1.5rem 0;
`;

const PreviewLabel = styled.label`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 150px;
  height: 100px;
  margin: 20px auto;
  padding: 5px;
  border-radius: 25%;
  outline: 3px dashed gray;
  background: rgba(255, 255, 255, 0.1);
  // box-shadow: rgb(104, 142, 129) 2px 2px 2px 4px;
  color: gray;
  cursor: pointer;
  font-size: 20px;

  &:hover {
    // outline: 3px solid rgb(104, 142, 129);
    opacity: 0.7;
    background: gray;
    color: white;
  }
  svg {
    font-size: 28px;
    color: gray;
    &:hover {
      opacity: 0.7;
      color: white;
    }
  }

  span {
    font-weight: 700;
    font-size: 16px;
    padding-top: 0.5rem;
  }

  input {
    display: none;
  }
`;

const PreviewAlbum = styled.ul`
  width: 100%;
  height: 80%;
  display: flex;
  flex-direction: row;
  // flex-wrap: wrap;
  justify-content: start;
  align-items: center;
  overflow: scroll;
`;

const PreviewImages = styled.li`
  margin: 16px 16px;
  margin-bottom: 60px;
  box-shadow: 0px 1px 2px 0px;
  position: relative;
  outline: 2px solid rgb(104, 142, 129);
  // background: rgb(104, 142, 129);
  padding: 10px 10px;

  img {
    width: 200px;
    height: 200px;
    object-fit: cover;
  }

  button {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    position: absolute;
    background-color: transparent;
    top: -16px;
    right: -16px;
    cursor: pointer;
    color: gray;
    font-size: 20px;

    &:hover {
      opacity: 0.7;
    }
  }
`;

const PreviewImagesLen = styled.p`
  display: flex;
  margin: 5px auto;
  text-align: center;
  justify-content: center;
  span {
    color: red;
  }
`;

const PreviewContainer = (props) => {
  const { selectedImages, setSelectedImages } = useContext(StepContext);

  // //取得相簿名稱,日期,描述
  // const name = useContext(AlbumName);
  // const date = useContext(AlbumDate);
  // const description = useContext(AlbumDescription);
  // const test = useContext(Test);
  // console.log(test);
  // console.log(name, date, description);

  //拖曳上傳

  // 點選照片
  // const [selectedImages, setSelectedImages] = useState([]);

  // 上傳照片
  const [files, setFiles] = useState([]);

  const [cards, setCards] = useState([]);

  // const [imageUrls, setImageUrls] = useState([]);
  // const imagesListRef = ref(storage, "images/");

  // 選取照片執行的 func
  const onSelectFile = (event) => {
    // filelist 取得一張照片
    const selectFiles = event.target.files; // files[0] -> Blob
    // 取得多張照片後轉 filelist array
    const selectFilesArray = Array.from(selectFiles); // Blob[]
    // 將filelist array 裡的每張照片展開 並回傳 url
    const imagesArray = selectFilesArray.map((file) => {
      return URL.createObjectURL(file);
    }); // string[] object

    const cardsArray = imagesArray.map((card, index) => {
      return {
        id: index,
        text: card,
      };
    });

    console.log(cardsArray);

    //最新狀態會是在當前圖片後上 網址
    setSelectedImages((previousImages) => previousImages.concat(imagesArray)); // selectedImages => string[]

    // 因為上傳的照片需要blob，所以上傳照片的最新狀態就是當前圖片後加上 選取照片後的 blob[]
    setFiles((previousImages) => previousImages.concat(selectFilesArray)); /// files => Blob[]

    setCards((previousImages) => previousImages.concat(cardsArray));

  };

  const moveCard = useCallback((dragIndex, hoverIndex) => {
    setCards((prevCards) =>
      update(prevCards, {
        $splice: [
          [dragIndex, 1],
          [hoverIndex, 0, prevCards[dragIndex]],
        ],
      })
    );
  }, []);

  const renderCard = useCallback((card, index) => {
    return (
      <PreviewImage
        key={card.id}
        index={index}
        id={card.id}
        text={card.text}
        moveCard={moveCard}
      />
    );
  }, []);

  // 上傳照片執行的 func
  const uploadImg = () => {
    if (files == null) return;
    for (let i = 0; i < files.length; i++) {
      const imageRef = ref(storage, `images/${files[i].name + v4()}`);
      uploadBytes(imageRef, files[i]).then((snapshot) => {
        // getDownloadURL(snapshot.ref).then((url) => {
        //   setImageUrls((prev) => [...prev, url]);
        // });
        alert("image upload");
      });
    }
  };

  // useEffect(() => {
  //   listAll(imagesListRef).then((response) => {
  //     response.items.forEach((item) => {
  //       getDownloadURL(item).then((url) => {
  //         setImageUrls((prev) => [...prev, url]);
  //       });
  //     });
  //   });
  // }, []);

  // // console.log(onSelectFile);

  return (
    // <AlbumName.Consumer>
    //   <AlbumDate.Consumer>
    //     <AlbumDescription.Consumer>
    //       <Test.Consumer>

    //       </Test.Consumer>
    //     </AlbumDescription.Consumer>
    //   </AlbumDate.Consumer>
    // </AlbumName.Consumer>
    <PreviewBoxes>
      {/* <p>{name}</p>
     <p>{date}</p>
     <p>{description}</p>
     <p>{test}</p> */}
      {/* <div>{cards.map((card, i) => renderCard(card, i))}</div> */}
      <PreviewLabel>
        <AiOutlineCloudUpload />
        add images
        <input
          type="file"
          name="images"
          onChange={onSelectFile}
          multiple
          accept="image/png, image/jpeg, image/jpg, image/svg"
        />
      </PreviewLabel>
      <br />
      {selectedImages.length > 0 &&
        (selectedImages.length > 10 ? (
          <PreviewImagesLen>
            limit 10 images.
            <br />
            <span>Please delete {selectedImages.length - 10} of them.</span>
          </PreviewImagesLen>
        ) : (
          <button onClick={uploadImg}>
            UPLOAD {selectedImages.length} IMAGE
            {selectedImages.length === 1 ? "" : "S"}
          </button>
        ))}
      {/* {imageUrls.map((url) => {
 return <img src={url} />;
})} */}

      <PreviewAlbum>
        {selectedImages &&
          selectedImages.map((image, index) => {
            return (
              <PreviewImages key={image}>
                {renderCard(cards[index], index)}
                {/* <img src={image} alt="upload images" /> */}
                <button
                  onClick={() =>
                    setSelectedImages(selectedImages.filter((e) => e !== image))
                  }
                >
                  <TiDeleteOutline />
                </button>
                <p>{index + 1}</p>
              </PreviewImages>
            );
          })}
      </PreviewAlbum>
    </PreviewBoxes>
  );
};

export default PreviewContainer;

{
  /* <div className="App">
  <input
    type="file"
    onChange={(event) => {
      setImageUpload(event.target.files[0]);
    }}
  />
  <button onClick={uploadFile}> Upload Image</button>
  {imageUrls.map((url) => {
    return <img src={url} />;
  })}
  </div> */
}



------ stepmenu.jsx

import React from "react";
import { useState, useEffect, useRef, useContext } from "react";
import { useNavigate } from "react-router-dom";
import styled from "styled-components";
import { db } from "../../../components/firebase";
import Albums from "./Albums";
import {
  query,
  collection,
  onSnapshot,
  addDoc,
  setDoc,
  doc,
  deleteDoc,
} from "firebase/firestore";
import Button from "../../../components/Button";

import { AuthContext } from "../../AuthPage/UserAuthProvider";
import { StepContext } from "../StepByStep/StepByStep";

// export const AlbumName = React.createContext();
// export const AlbumDate = React.createContext();
// export const AlbumDescription = React.createContext();

// export const Test = React.createContext();

// 文字打字機功能
// const MagicOcean = ["step1:", "step2:"];
// let index = 0;
// .attrs({ className: stepMenuBoxes })

const StepMenuBoxes = styled.div`
  max-width: 75%;
  height: 85%;
  display: flex;
  flex-direction: column;
  margin: auto;
  justify-content: center;
  align-items: center;
`;

const StepMenuTitle = styled.div`
  margin: 50px auto;
  color: gray;
  h2 {
    font-size: 2.2rem;
    color: transparent;
    -webkit-text-stroke: 1.5px gray;
    letter-spacing: 2px;
  }
`;

const StepMenuInput = styled.div``;

const StepMenuForm = styled.form`
  margin: auto;

  label {
    display: flex;
    justify-content: start;
    align-items: center;
    margin: 25px auto;
    color: gray;
    font-size: 18px;
    input {
      display: flex;
      justify-content: end;
      align-items: center;
      margin-left: 10px;
      padding: 0 10px;
      border-radius: 10px;
      background: rgba(255, 255, 255, 0.1);
      outline: 1.5px solid gray;
      font-size: 18px;
    }
  }
`;

const StepMenuButton = styled(Button)`
  margin: 60px auto;
  font-size: 20px;
  background: rgba(255, 255, 255, 0.1);
  outline: 2.5px solid gray;
  color: gray;

  &:hover {
    background: gray;
  }
`;

const StepMenuUl = styled.div``;

function StepMenu(props) {
  // const [editor, setEditor] = useState("");
  // const [name, setName] = useState("");
  // const [date, setDate] = useState("");
  // const [description, setDescription] = useState("");

  const [show, setShow] = useState(true);

  const { currentUser } = useContext(AuthContext);
  console.log(currentUser);

  const {
    editor,
    setEditor,
    name,
    setName,
    date,
    setDate,
    description,
    setDescription,
  } = useContext(StepContext);

  // 建立相簿
  const [albums, setAlbums] = useState([]);

  const handleEditor = (event) => {
    setEditor(event.target.value);
  };

  const handleName = (event) => {
    setName(event.target.value);
  };

  const handleDate = (event) => {
    setDate(event.target.value);
  };

  const handleDescription = (event) => {
    setDescription(event.target.value);
  };

  // 將資料存到firestorge
  const submit = async (e) => {
    e.preventDefault(e);
    if (editor === "" || name === "" || date === "" || description === "") {
      return;
    }
    try {
      const newDocRef = doc(collection(db, currentUser.email));

      await setDoc(newDocRef, {
        Editor: editor,
        Name: name,
        Date: date,
        Description: description,
      });

      // const docRef = await addDoc(
      //   collection(db, currentUser.email),
      //   {
      //     Editor: editor,
      //     Name: name,
      //     Date: date,
      //     Description: description,
      //   }
      // { merge: false }
      // );
      console.log("Document written with ID: ", newDocRef.id);
      // console.log("Document written with ID: ", docRef.id);
      setEditor("");
      setName("");
      setDate("");
      setDescription("");
      setShow(false);
    } catch (error) {
      console.error("Error adding document: ", error);
    }
  };

  // await addDoc(collection(db, "albums"), {
  //   Editor: editor,
  //   Name: name,
  //   Date: date,
  //   Description: description,
  // });

  // console.log(name, date, description);

  useEffect(() => {
    const q = query(collection(db, "albums"));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      let albumsArr = [];
      querySnapshot.forEach((doc) => {
        albumsArr.push({ ...doc.data(), id: doc.id });
      });
      setAlbums(albumsArr);
    });
    return () => unsubscribe();
  }, []);

  // const navigate = useNavigate();
  // 從資料庫將資料刪除
  const deleteAlbum = async (id) => {
    await deleteDoc(doc(db, "albums", id));
    setShow(true);
    // props.prev();
    // navigate("/home/edit");
  };

  // useEffect(() => {
  //   setTimeout(() => {
  //     navigate("/home/edit");
  //   }, 3000);
  // }, [navigate]);

  console.log(albums);

  return (
    <>
      {/* <StepMenuBoxes> */}
      <StepMenuTitle>
        {show ? <h2>Let's try to make special album by yourself !</h2> : null}
      </StepMenuTitle>
      <StepMenuInput>
        {show ? (
          <StepMenuForm onSubmit={submit}>
            <label htmlFor="">
              Editor :
              <input
                type="text"
                value={editor}
                onChange={handleEditor}
                required
              />
            </label>{" "}
            <label htmlFor="">
              Album Name :
              <input type="text" value={name} onChange={handleName} required />
            </label>{" "}
            <label htmlFor="">
              Date :
              <input type="date" value={date} onChange={handleDate} />
            </label>{" "}
            <label htmlFor="">
              {" "}
              Description :
              <input
                type="text"
                value={description}
                onChange={handleDescription}
                required
              />
            </label>
            <StepMenuButton>Submit</StepMenuButton>
          </StepMenuForm>
        ) : null}
      </StepMenuInput>
      <StepMenuUl>
        {albums.map((album, index) => (
          <Albums key={index} album={album} deleteAlbum={deleteAlbum} />
        ))}
      </StepMenuUl>
      {/* </StepMenuBoxes> */}
    </>
  );
}

export default StepMenu;



